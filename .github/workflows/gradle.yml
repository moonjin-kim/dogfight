# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'adopt'

    - name: make application.yml
      run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
      shell : bash

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash 
        
      
    - name: Build with Gradle
      run: ./gradlew clean build --exclude-task test
      shell: bash
      
    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build --platform linux/arm64/v8 -t ${{ secrets.DOCKERHUB_USERNAME }}/dogfight-server .   

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dogfight-server

    # 6. 서버 접속하여 도커 이미지를 pull 받고 실행
    - name: WAS 인스턴스 접속 및 애플리케이션 실행 # (5)
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER_NAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          docker stop $(docker ps -a -q) 
          docker rm $(docker ps -a -q) 
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}"/dogfight-server
          docker run -d -p 8080:8080 --name dogserver "${{ secrets.DOCKERHUB_USERNAME }}/dogfight-server
